import { serializeToken } from '@svta/common-media-library/structuredfield/serialize/serializeToken';
import assert from 'node:assert';
import test from 'node:test';

test('serializeToken', () => {
	assert.deepStrictEqual(serializeToken(Symbol.for('token')), `token`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to!ken`)), `to!ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to#ken`)), `to#ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to$ken`)), `to$ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to%ken`)), `to%ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to&ken`)), `to&ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to'ken`)), `to'ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to*ken`)), `to*ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to+ken`)), `to+ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to-ken`)), `to-ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to.ken`)), `to.ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to^ken`)), `to^ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to_ken`)), `to_ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for('to`ken')), 'to`ken');
	assert.deepStrictEqual(serializeToken(Symbol.for(`to|ken`)), `to|ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to~ken`)), `to~ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`towken`)), `towken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to:ken`)), `to:ken`);
	assert.deepStrictEqual(serializeToken(Symbol.for(`to/ken`)), `to/ken`);

	assert.throws(() => serializeToken(Symbol.for(`to"ken`)), /failed to serialize "to"ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to(ken`)), /failed to serialize "to\(ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to)ken`)), /failed to serialize "to\)ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to,ken`)), /failed to serialize "to,ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to;ken`)), /failed to serialize "to;ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to<ken`)), /failed to serialize "to<ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to=ken`)), /failed to serialize "to=ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to>ken`)), /failed to serialize "to>ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to?ken`)), /failed to serialize "to\?ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to@ken`)), /failed to serialize "to@ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to[ken`)), /failed to serialize "to\[ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to\\ken`)), /failed to serialize "to\\ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to]ken`)), /failed to serialize "to\]ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to{ken`)), /failed to serialize "to\{ken" as Token/);
	assert.throws(() => serializeToken(Symbol.for(`to}ken`)), /failed to serialize "to\}ken" as Token/);
});
